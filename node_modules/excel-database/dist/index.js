"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExcelDatabase = void 0;
const XLSX = require("xlsx");
class ExcelDatabase {
    constructor(filePath, sheetName = 'Sheet1') {
        this.filePath = filePath;
        this.sheetName = sheetName;
        this.data = this.loadData();
    }
    loadData() {
        const workbook = XLSX.readFile(this.filePath);
        const worksheet = workbook.Sheets[this.sheetName];
        return XLSX.utils.sheet_to_json(worksheet);
    }
    saveData() {
        const workbook = XLSX.readFile(this.filePath);
        const worksheet = XLSX.utils.json_to_sheet(this.data);
        workbook.Sheets[this.sheetName] = worksheet;
        XLSX.writeFile(workbook, this.filePath);
    }
    select(query = {}) {
        const result = this.data.filter(row => Object.keys(query).every(key => row[key] === query[key]));
        return result.length > 0 ? result : null;
    }
    getColumnValue(searchColumn, searchValue, targetColumn) {
        const row = this.data.find(row => row[searchColumn] === searchValue);
        return row ? row[targetColumn] : undefined;
    }
    insert(newRow) {
        this.data.push(newRow);
        this.saveData();
    }
    update(query, updateData) {
        this.data = this.data.map(row => {
            if (Object.keys(query).every(key => row[key] === query[key])) {
                return Object.assign(Object.assign({}, row), updateData);
            }
            return row;
        });
        this.saveData();
    }
    delete(query) {
        this.data = this.data.filter(row => !Object.keys(query).every(key => row[key] === query[key]));
        this.saveData();
    }
    addSheet(sheetName, initialData = []) {
        const workbook = XLSX.readFile(this.filePath);
        if (workbook.Sheets[sheetName]) {
            throw new Error(`Sheet with name "${sheetName}" already exists.`);
        }
        const worksheet = XLSX.utils.json_to_sheet(initialData);
        XLSX.utils.book_append_sheet(workbook, worksheet, sheetName);
        XLSX.writeFile(workbook, this.filePath);
    }
    isSheetExists(sheetName) {
        const workbook = XLSX.readFile(this.filePath);
        return workbook.SheetNames.includes(sheetName) ? 1 : null;
    }
    getAllSheetNames() {
        const workbook = XLSX.readFile(this.filePath);
        return workbook.SheetNames;
    }
    getColumnDatasNumber(columnName) {
        return this.data.filter(row => row[columnName] !== undefined && row[columnName] !== null && row[columnName] !== '').length;
    }
}
exports.ExcelDatabase = ExcelDatabase;
